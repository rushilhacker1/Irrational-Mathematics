(function () {
  'use strict';

  var pathToKey = function (path, alt) {
    if (path.length === 0) {
      return '';
    }
    var s = '';
    for (var i = 0, l = path.length; i < l; i++) {
      if (isString(path[i]) && path[i]) {
        s += (s ? '.' : '') + escapeKey(path[i]);
      } else if (isNumber(path[i])) {
        if (!alt) {
          s += (s ? '.' : '') + '[' + path[i] + ']';
        }
      } else {
        return false;
      }
    }
    return s ? s : false;
  };

  var genErrMsg = function (path, msg) {
    return (pathToKey(path) || '<root>') + ': ' + msg;
  };

  var typeOf = function (obj) {
    return Object.prototype.toString.call(obj);
  };
  typeOf.Boolean = typeOf(false);
  typeOf.String = typeOf('');
  typeOf.Number = typeOf(0);
  typeOf.Array = typeOf([]);
  typeOf.Date = typeOf(new Date(0));

  var isBoolean = function (obj) {
    return obj === true || obj === false;
  };
  var isString = function (obj) {
    return typeof obj === 'string';
  };
  var isNumber = function (obj) {
    return typeof obj === 'number';
  };
  var isArray = Array.isArray || function (obj) {
    return typeOf(obj) === typeOf.Array;
  };
  var isDate = function (obj) {
    return typeOf(obj) === typeOf.Date;
  };
  var isTable = function (obj) {
    return obj !== null && typeof obj === 'object' &&
        !(isArray(obj) || isDate(obj));
  };

  var isMixedTypeArray = function (arr) {
    if (arr.length < 2) {
      return false;
    }
    var type = typeOf(arr[0]);
    for (var i = 1, l = arr.length; i < l; i++) {
      if (arr[i] != null && typeOf(arr[i]) !== type) {
        return true;
      }
    }
    return false;
  };

  var containArrays = function (arr) {
    if (arr.length < 1) {
      return false;
    }
    for (var i = 0, l = arr.length; i < l; i++) {
      if (isArray(arr[i])) {
        return true;
      }
    }
    return false;
  };

  var containTables = function (arr) {
    if (arr.length < 1) {
      return false;
    }
    for (var i = 0, l = arr.length; i < l; i++) {
      if (isTable(arr[i])) {
        return true;
      }
    }
    return false;
  };

  var hasOwnProperty = function (obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };

  var isCircular = function (obj) {
    var isCircular_ = function (obj, stack) {
      if (!(isArray(obj) || isTable(obj))) {
        return false;
      }
      if (stack.indexOf(obj) !== -1) {
        return true;
      }
      stack.push(obj);
      for (var k in obj) {
        if (hasOwnProperty(obj, k)) {
          var size = stack.length;
          var ret = isCircular_(obj[k], stack);
          if (ret) {
            return true;
          }
          stack.splice(size);
        }
      }
      return false;
    };
    return isCircular_(obj, []);
  };

  var escapeBoolean = function (context, key, obj) {
    return obj ? 'true' : 'false';
  };
  var escapeString = function (context, key, obj) {
    if (typeof JSON === 'object' && JSON) {
      return JSON.stringify(obj);
    }
    return '"' + String(obj).replace(/[\x00-\x1F"\\]/g, function (c) {
      switch (c) {
        case '"': case '\\': return '\\' + c;
        case '\t': return '\\t';
        case '\n': return '\\n';
        case '\r': return '\\r';
        case '\b': return '\\b';
        case '\f': return '\\f';
        default:
          var hex = c.charCodeAt(0).toString(16);
          return '\\u' + '0000'.substr(hex.length) + hex;
      }
    }) + '"';
  };
  var escapeNumber = function (context, key, obj) {
    if (!isFinite(obj)) {
      throw new Error(genErrMsg(context.path, 'Number must be finite.'));
    }
    // Cast everything to floats due to [0, 0.0]!  Even 9223372036854775807.3
    // is an integer, and 9223372036854775807 is equal to 9223372036854776832.
    // We should use strings to store big integers.
    var s;
    if (Number.isInteger ? Number.isInteger(obj) : Math.floor(obj) === obj) {
      s = obj.toFixed(1);
    } else {
      s = String(obj);
    }
    s = s.replace(/([eE])(\d)/, '$1+$2');
    return /[.eE]/.test(s) ? s : s + '.0';
  };
  